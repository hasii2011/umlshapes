
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallyadvanced.ui.UnitTestBaseW import UnitTestBaseW

from wx.lib.ogl import OGLInitialize

from wx.lib.ogl import Shape

from umlshapes.mixins.TopLeftMixin import Rectangle
from umlshapes.mixins.TopLeftMixin import TopLeftMixin

from umlshapes.types.UmlPosition import UmlPosition

SHAPE_WIDTH:  int = 120
SHAPE_HEIGHT: int = 60
SHAPE_X:      int = 1000
SHAPE_Y:      int = 2000


class MixinShape(Shape, TopLeftMixin):

    def __init__(self):

        super().__init__()      # type: ignore
        TopLeftMixin.__init__(self, umlShape=self, width=SHAPE_WIDTH, height=SHAPE_HEIGHT)

        self.SetX(x=SHAPE_X)       # These are the OGL center coordinates
        self.SetY(y=SHAPE_Y)


class TestTopLeftMixin(UnitTestBaseW):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 01 June 2025
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()
        OGLInitialize()

        expectedX: int = SHAPE_X - (SHAPE_WIDTH // 2)
        expectedY: int = SHAPE_Y - (SHAPE_HEIGHT // 2)

        self._expectedPosition: UmlPosition = UmlPosition(x=expectedX, y=expectedY)
        self._expectedTopLeft:  UmlPosition = self._expectedPosition

        self._oglTestShape: MixinShape = MixinShape()

        self._oglConfirmShape: MixinShape = MixinShape()
        self._newPosition: UmlPosition = UmlPosition(x=100, y=200)
        self._oglConfirmShape.position = self._newPosition

    def tearDown(self):
        super().tearDown()

    def testBasicRectangleLeft(self):
        shape: MixinShape = MixinShape()

        rectangle:    Rectangle = shape.rectangle
        expectedLeft: int       = SHAPE_X - (SHAPE_WIDTH // 2)
        self.assertEqual(expectedLeft, rectangle.left, 'Left not correct')

    def testBasicRectangleTop(self):
        shape: MixinShape = MixinShape()

        rectangle:   Rectangle = shape.rectangle
        expectedTop: int       = SHAPE_Y - (SHAPE_HEIGHT // 2)
        self.assertEqual(expectedTop, rectangle.top, 'Top not correct')

    def testBasicRectangleRight(self):
        shape: MixinShape = MixinShape()

        rectangle:      Rectangle = shape.rectangle
        expectedRight: int        = SHAPE_X + (SHAPE_WIDTH // 2)
        self.assertEqual(expectedRight, rectangle.right, 'Right not correct')

    def testBasicRectangleBottom(self):
        shape: MixinShape = MixinShape()

        rectangle:      Rectangle = shape.rectangle
        expectedBottom: int       = SHAPE_Y + (SHAPE_HEIGHT // 2)
        self.assertEqual(expectedBottom, rectangle.bottom, 'Bottom not correct')

    def testPositionSetConfirmOglX(self):

        expectedOglX: int = self._newPosition.x + (self._oglTestShape.size.width // 2)
        actualOglX:   int = self._oglConfirmShape.GetX()

        self.assertEqual(expectedOglX, actualOglX, 'Underlying centered X not correctly set')

    def testPositionSetConfirmOglY(self):

        expectedOglY: int = self._newPosition.y + (self._oglTestShape.size.height // 2)
        actualOglY:   int = self._oglConfirmShape.GetY()

        self.assertEqual(expectedOglY, actualOglY, 'Underlying centered Y not correctly set')

    def testPositionGet(self):

        shape: MixinShape = MixinShape()

        actualPosition:   UmlPosition = shape.position

        self.assertEqual(self._expectedPosition, actualPosition, 'Broken position')

    def testTopLeft(self):

        shape: MixinShape = MixinShape()

        actualTopLeft:   UmlPosition = shape.position

        self.assertEqual(self._expectedTopLeft, actualTopLeft, 'Broken top left report')
        self.assertEqual(self._expectedTopLeft, actualTopLeft, 'Broken top left report')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestTopLeftMixin))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
