
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallyadvanced.ui.UnitTestBaseW import UnitTestBaseW

from pyutmodelv2.PyutActor import PyutActor
from pyutmodelv2.PyutClass import PyutClass
from pyutmodelv2.PyutLink import PyutLink
from pyutmodelv2.PyutNote import PyutNote

from umlshapes.lib.ogl import OGLInitialize
from umlshapes.links.UmlLink import UmlLink
from umlshapes.mixins.IdentifierMixin import InvalidOperationError

from umlshapes.shapes.UmlActor import UmlActor
from umlshapes.shapes.UmlClass import UmlClass
from umlshapes.shapes.UmlNote import UmlNote
from umlshapes.shapes.UmlText import UmlText
from umlshapes.shapes.UmlUseCase import UmlUseCase


class TestIdentifierMixin(UnitTestBaseW):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 01 September 2025
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()
        OGLInitialize()

    def tearDown(self):
        super().tearDown()

    def testUmlActorEquality(self):

        pyutActor: PyutActor = PyutActor(actorName='John Wayne')
        umlActor:  UmlActor  = UmlActor(pyutActor=pyutActor)

        umlActor2: UmlActor = umlActor

        self.assertTrue(umlActor == umlActor2, 'My __equ__ is not working')

    def testUmlActorInEquality(self):

        pyutActor: PyutActor = PyutActor(actorName='John Wayne')
        umlActor:  UmlActor  = UmlActor(pyutActor=pyutActor)

        pyutActor2: PyutActor = PyutActor(actorName='John Wayne II')
        umlActor2:  UmlActor  = UmlActor(pyutActor=pyutActor2)

        self.assertFalse(umlActor == umlActor2, 'My __equ__ is not working')

    def testUmlClassInEquality(self):

        pyutClass: PyutClass = PyutClass(name='BogusClass')
        umlClass:  UmlClass  = UmlClass(pyutClass=pyutClass)

        pyutClass2: PyutClass = PyutClass(name='BogusClass2')
        umlClass2: UmlClass   = UmlClass(pyutClass=pyutClass2)

        self.assertFalse(umlClass == umlClass2, 'Class equality not working')

    def testUmlNoteEquality(self):
        pyutNote: PyutNote = PyutNote(content='I am a note')
        umlNote:  UmlNote  = UmlNote(pyutNote=pyutNote)

        umlNote2: UmlNote = umlNote

        self.assertTrue(umlNote == umlNote2, 'Note equality not working')

    def testUmlTextEquality(self):

        umlText:  UmlText = UmlText()
        umlText2: UmlText = umlText
        self.assertEqual(umlText, umlText2, 'Text equality is not working')

    def testUseCaseInEquality(self):
        umlActor:  UmlActor = UmlActor()
        umlActor2: UmlActor = UmlActor()

        self.assertNotEqual(umlActor, umlActor2, 'Actor equal is wrong')

    def testUniqueIds(self):

        pyutActor: PyutActor = PyutActor(actorName='John Wilkes Booth')
        umlActor:  UmlActor  = UmlActor(pyutActor=pyutActor)

        umlActor2:  UmlActor = UmlActor()

        self.assertFalse(umlActor.id == umlActor2.id, 'IDs should be unique')

    def testUmlActorInvalidGetId(self):
        """
        These tests make sure that the IdentifierMixin is place before any
        shape mixin.
        See Python left to right method resolution order (MRO)
        """
        umlActor: UmlActor = UmlActor()
        self.assertRaises(InvalidOperationError, lambda: umlActor.GetId())

    def testUmlUseCaseInvalidGetId(self):
        umlUseCase: UmlUseCase = UmlUseCase()
        self.assertRaises(InvalidOperationError, lambda: umlUseCase.GetId())

    def testUmlUmlNoteInvalidGetId(self):
        umlNote: UmlNote = UmlNote()

        try:
            umlNote.GetId()
            self.assertFalse(True, 'Where is our exception')
        except InvalidOperationError:
            self.assertTrue(True, 'We should get this exception')
        # self.assertRaises(InvalidOperationError, lambda: umlNote.GetId(), 'Incorrect MRO placement')

    def testUmlTextInvalidGetId(self):
        umlText: UmlText = UmlText()
        try:
            umlText.GetId()
            self.assertFalse(True, 'Where is our exception')
        except InvalidOperationError:
            self.assertTrue(True, 'We should get this exception')

        # self.assertRaises(InvalidOperationError, lambda: umlText.GetId(), 'Incorrect MRO placement')

    def testUmlClassInvalidGetId(self):
        umlClass: UmlClass = UmlClass()

        try:
            umlClass.GetId()
            self.assertFalse(True, 'Where is our exception')
        except InvalidOperationError:
            self.assertTrue(True, 'We should get this exception')
        # self.assertRaises(InvalidOperationError, lambda: umlClass.GetId(), 'Incorrect MRO placement')

    def testUmlLinkInvalidGetId(self):

        pyutLink: PyutLink = PyutLink()
        umlLink:  UmlLink  = UmlLink(pyutLink=pyutLink)
        try:
            umlLink.GetId()
            self.assertFalse(True, 'Where is our exception')
        except InvalidOperationError:
            self.assertTrue(True, 'We should get this exception')

        # self.assertRaises(InvalidOperationError, lambda: umlLink.GetId(), 'Incorrect MRO placement')

def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestIdentifierMixin))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
