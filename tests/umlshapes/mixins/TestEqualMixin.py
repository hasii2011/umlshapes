
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallyadvanced.ui.UnitTestBaseW import UnitTestBaseW
from codeallybasic.UnitTestBase import UnitTestBase
from pyutmodelv2.PyutActor import PyutActor
from pyutmodelv2.PyutClass import PyutClass
from pyutmodelv2.PyutNote import PyutNote

from umlshapes.lib.ogl import OGLInitialize
from umlshapes.mixins.EqualMixin import EqualMixin
from umlshapes.shapes.UmlActor import UmlActor
from umlshapes.shapes.UmlClass import UmlClass
from umlshapes.shapes.UmlNote import UmlNote
from umlshapes.shapes.UmlText import UmlText


class TestEqualMixin(UnitTestBaseW):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 29 August 2025
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()
        OGLInitialize()

    def tearDown(self):
        super().tearDown()

    def testUmlActorEquality(self):

        pyutActor: PyutActor = PyutActor(actorName='John Wayne')
        umlActor:  UmlActor  = UmlActor(pyutActor=pyutActor)

        umlActor2: UmlActor = umlActor

        self.assertTrue(umlActor == umlActor2, 'My __equ__ is not working')

    def testUmlActorInEquality(self):

        pyutActor: PyutActor = PyutActor(actorName='John Wayne')
        umlActor:  UmlActor  = UmlActor(pyutActor=pyutActor)

        pyutActor2: PyutActor = PyutActor(actorName='John Wayne II')
        umlActor2:  UmlActor  = UmlActor(pyutActor=pyutActor2)

        self.assertFalse(umlActor == umlActor2, 'My __equ__ is not working')

    def testUmlClassInEquality(self):

        pyutClass: PyutClass = PyutClass(name='BogusClass')
        umlClass: UmlClass   = UmlClass(pyutClass=pyutClass)

        pyutClass2: PyutClass = PyutClass(name='BogusClass2')
        umlClass2: UmlClass   = UmlClass(pyutClass=pyutClass2)

        self.assertFalse(umlClass == umlClass2, 'Class equality not working')

    def testUmlNoteEquality(self):
        pyutNote: PyutNote = PyutNote(content='I am a note')
        umlNote:  UmlNote  = UmlNote(pyutNote=pyutNote)

        umlNote2: UmlNote = umlNote

        self.assertTrue(umlNote == umlNote2, 'Note equality not working')

    def testUmlTextEquality(self):

        umlText: UmlText = UmlText()
        umlText2: UmlText = umlText
        self.assertEqual(umlText, umlText2, 'Text equality is not working')

    def testUseCaseInEquality(self):
        umlActor:  UmlActor = UmlActor()
        umlActor2: UmlActor = UmlActor()

        self.assertNotEqual(umlActor, umlActor2, 'Actor equal is wrong')

def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestEqualMixin))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
