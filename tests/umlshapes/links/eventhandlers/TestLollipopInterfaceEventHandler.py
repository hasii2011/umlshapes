from unittest import TestSuite
from unittest import main as unitTestMain

from unittest.mock import Mock
from unittest.mock import PropertyMock

from codeallybasic.UnitTestBase import UnitTestBase
from pyutmodelv2.PyutClass import PyutClass
from pyutmodelv2.PyutInterface import PyutInterface
from pyutmodelv2.PyutInterface import PyutInterfaces
from pyutmodelv2.PyutLink import PyutLink
from pyutmodelv2.enumerations.PyutLinkType import PyutLinkType

from umlshapes.frames.UmlClassDiagramFrame import UmlClassDiagramFrame
from umlshapes.links.UmlInterface import UmlInterface
from umlshapes.links.UmlLollipopInterface import UmlLollipopInterface
from umlshapes.links.eventhandlers.UmlLollipopInterfaceEventHandler import UmlLollipopInterfaceEventHandler
from umlshapes.shapes.UmlClass import UmlClass
from umlshapes.types.Common import UmlShapeList


class TestLollipopInterfaceEventHandler(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 02 July 2025
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testGetDefinedInterfacesLollipops(self):

        lollipop1:    Mock         = Mock(spec=UmlLollipopInterface)
        lollipop2:    Mock         = Mock(spec=UmlLollipopInterface)

        pyutInterface1 = Mock(spec=PyutInterface)
        pyutInterface2 = Mock(spec=PyutInterface)

        type(pyutInterface1).name = PropertyMock(return_value='Interface1')
        type(pyutInterface2).name = PropertyMock(return_value='Interface2')

        type(lollipop1).pyutInterface = PropertyMock(return_value=pyutInterface1)
        type(lollipop2).pyutInterface = PropertyMock(return_value=pyutInterface2)

        umlshapes:    UmlShapeList = UmlShapeList([lollipop1, lollipop2])

        mockFrame:    Mock = Mock(spec=UmlClassDiagramFrame)
        type(mockFrame).umlShapes = PropertyMock(return_value=umlshapes)

        mockShape:    Mock = Mock(spec=UmlLollipopInterface)
        mockShape.GetCanvas.return_value = mockFrame
        eventHandler: UmlLollipopInterfaceEventHandler = UmlLollipopInterfaceEventHandler(mockShape)

        pyutInterfaces: PyutInterfaces = eventHandler.getDefinedInterfaces()

        self.assertEqual(2, len(pyutInterfaces), 'Incorrect Number of lollipops')

    def testGetDefinedInterfacesStandard(self):

        mockInterfaceClass1:    Mock = Mock(spec=UmlClass)
        mockImplementingClass1: Mock = Mock(spec=UmlClass)
        mockInterfaceClass2:    Mock = Mock(spec=UmlClass)
        mockImplementingClass2: Mock = Mock(spec=UmlClass)

        pyutInterfaceClass1:    PyutClass = PyutClass(name='InterfaceClass1')
        pyutImplementingClass1: PyutClass = PyutClass(name='ImplementingClass1')

        pyutInterfaceClass2:    PyutClass = PyutClass(name='InterfaceClass2')
        pyutImplementingClass2: PyutClass = PyutClass(name='ImplementingClass2')

        type(mockInterfaceClass1).pyutClass    = PropertyMock(return_value=pyutInterfaceClass1)
        type(mockImplementingClass1).pyutClass = PropertyMock(return_value=pyutImplementingClass1)

        type(mockInterfaceClass2).pyutClass    = PropertyMock(return_value=pyutInterfaceClass2)
        type(mockImplementingClass2).pyutClass = PropertyMock(return_value=pyutImplementingClass2)

        pyutLink1: PyutLink = PyutLink(name='StandardInterface1', linkType=PyutLinkType.INTERFACE)
        pyutLink2: PyutLink = PyutLink(name='StandardInterface2', linkType=PyutLinkType.INTERFACE)

        standardInterface1: Mock = Mock(spec=UmlInterface)
        standardInterface2: Mock = Mock(spec=UmlInterface)

        type(standardInterface1).interfaceClass    = PropertyMock(return_value=mockInterfaceClass1)
        type(standardInterface1).implementingClass = PropertyMock(return_value=mockImplementingClass1)

        type(standardInterface2).interfaceClass    = PropertyMock(return_value=mockInterfaceClass2)
        type(standardInterface2).implementingClass = PropertyMock(return_value=mockImplementingClass2)

        standardInterface1.pyutLink = PropertyMock(return_value=pyutLink1)
        standardInterface2.pyutLink = PropertyMock(return_value=pyutLink2)

        umlshapes:    UmlShapeList = UmlShapeList([standardInterface1, standardInterface2])

        mockFrame:    Mock = Mock(spec=UmlClassDiagramFrame)
        type(mockFrame).umlShapes = PropertyMock(return_value=umlshapes)

        mockShape:    Mock = Mock(spec=UmlLollipopInterface)
        mockShape.GetCanvas.return_value = mockFrame
        eventHandler: UmlLollipopInterfaceEventHandler = UmlLollipopInterfaceEventHandler(mockShape)

        pyutInterfaces: PyutInterfaces = eventHandler.getDefinedInterfaces()

        self.assertEqual(2, len(pyutInterfaces), 'Incorrect Number of standard interfaces')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestLollipopInterfaceEventHandler))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
