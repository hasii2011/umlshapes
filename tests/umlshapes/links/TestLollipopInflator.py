
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from umlshapes.links.LollipopInflator import LollipopInflator
from umlshapes.preferences.UmlPreferences import UmlPreferences
from umlshapes.types.Common import AttachmentSide
from umlshapes.types.Common import LollipopCoordinates
from umlshapes.types.Common import Rectangle
from umlshapes.types.UmlPosition import UmlPosition


LOLLIPOP_START_X: int = 500
LOLLIPOP_START_Y: int = 500

TEST_LOLLIPOP_LINE_LENGTH: int = 90
TEST_INFLATION_RATE:       int = 2


class TestLollipopInflator(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 08 June 2025
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()
        self._preferences:       UmlPreferences = UmlPreferences()
        self._saveInflationRate: int            = self._preferences.hitAreaInflationRate

        UmlPreferences().hitAreaInflationRate = TEST_INFLATION_RATE

    def tearDown(self):
        super().tearDown()
        self._preferences.hitAreaInflationRate = self._saveInflationRate

    def testBottom(self):

        lollipopCoordinates: LollipopCoordinates = LollipopCoordinates(
            startCoordinates=UmlPosition(x=LOLLIPOP_START_X, y=LOLLIPOP_START_Y),
            endCoordinates=UmlPosition(x=LOLLIPOP_START_X, y=LOLLIPOP_START_Y + TEST_LOLLIPOP_LINE_LENGTH),
            lollipopLineLength=TEST_LOLLIPOP_LINE_LENGTH
        )
        expectedInflation: Rectangle = Rectangle(
            left=LOLLIPOP_START_X - TEST_INFLATION_RATE,
            top=LOLLIPOP_START_X,
            right=LOLLIPOP_START_X + TEST_INFLATION_RATE,
            bottom=LOLLIPOP_START_Y + TEST_LOLLIPOP_LINE_LENGTH
        )
        inflatedLollipop:  Rectangle = LollipopInflator.inflateLollipop(
            attachmentSide=AttachmentSide.BOTTOM,
            lollipopCoordinates=lollipopCoordinates
        )
        self.assertEqual(expectedInflation, inflatedLollipop, 'Incorrect bottom inflation :-)')

    def testTop(self):

        lollipopCoordinates: LollipopCoordinates = LollipopCoordinates(
            startCoordinates=UmlPosition(x=LOLLIPOP_START_X, y=LOLLIPOP_START_Y),
            endCoordinates=UmlPosition(x=LOLLIPOP_START_X, y=LOLLIPOP_START_Y - TEST_LOLLIPOP_LINE_LENGTH),
            lollipopLineLength=TEST_LOLLIPOP_LINE_LENGTH
        )

        expectedInflation: Rectangle = Rectangle(
            left=LOLLIPOP_START_X - TEST_INFLATION_RATE,
            top=LOLLIPOP_START_Y - TEST_LOLLIPOP_LINE_LENGTH,
            right=LOLLIPOP_START_X + TEST_INFLATION_RATE,
            bottom=LOLLIPOP_START_Y
        )
        inflatedLollipop:  Rectangle = LollipopInflator.inflateLollipop(
            attachmentSide=AttachmentSide.TOP,
            lollipopCoordinates=lollipopCoordinates
        )
        self.assertEqual(expectedInflation, inflatedLollipop, 'Incorrect top inflation :-)')

    def testRight(self):

        lollipopCoordinates: LollipopCoordinates = LollipopCoordinates(
            startCoordinates=UmlPosition(x=LOLLIPOP_START_X, y=LOLLIPOP_START_Y),
            endCoordinates=UmlPosition(x=LOLLIPOP_START_X + TEST_LOLLIPOP_LINE_LENGTH, y=LOLLIPOP_START_Y),
            lollipopLineLength=TEST_LOLLIPOP_LINE_LENGTH
        )

        expectedInflation: Rectangle = Rectangle(
            left=LOLLIPOP_START_X,
            top=LOLLIPOP_START_Y - TEST_INFLATION_RATE,
            right=LOLLIPOP_START_X + TEST_LOLLIPOP_LINE_LENGTH,
            bottom=LOLLIPOP_START_Y + TEST_INFLATION_RATE
        )

        inflatedLollipop:  Rectangle = LollipopInflator.inflateLollipop(
            attachmentSide=AttachmentSide.RIGHT,
            lollipopCoordinates=lollipopCoordinates
        )
        self.assertEqual(expectedInflation, inflatedLollipop, 'Incorrect top inflation :-)')

    def testLeft(self):

        lollipopCoordinates: LollipopCoordinates = LollipopCoordinates(
            startCoordinates=UmlPosition(x=LOLLIPOP_START_X, y=LOLLIPOP_START_Y),
            endCoordinates=UmlPosition(x=LOLLIPOP_START_X - TEST_LOLLIPOP_LINE_LENGTH, y=LOLLIPOP_START_Y),
            lollipopLineLength=TEST_LOLLIPOP_LINE_LENGTH
        )

        expectedInflation: Rectangle = Rectangle(
            left=LOLLIPOP_START_X,
            top=LOLLIPOP_START_Y - TEST_INFLATION_RATE,
            right=LOLLIPOP_START_X - TEST_LOLLIPOP_LINE_LENGTH,
            bottom=LOLLIPOP_START_Y + TEST_INFLATION_RATE
        )

        inflatedLollipop:  Rectangle = LollipopInflator.inflateLollipop(
            attachmentSide=AttachmentSide.RIGHT,
            lollipopCoordinates=lollipopCoordinates
        )

        self.assertEqual(expectedInflation, inflatedLollipop, 'Incorrect top inflation :-)')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestLollipopInflator))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
