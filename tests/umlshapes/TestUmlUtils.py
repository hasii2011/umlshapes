
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from umlshapes.UmlUtils import UmlUtils
from umlshapes.shapes.TopLeftMixin import Rectangle
from umlshapes.types.UmlPosition import UmlPosition

RECTANGLE_LEFT:   int = 500
RECTANGLE__TOP:   int = 1000
RECTANGLE_RIGHT:  int = 700
RECTANGLE_BOTTOM: int = 1200


class TestUmlUtils(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 01 June 2025
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()
        self._rectangle: Rectangle = Rectangle(
            left=RECTANGLE_LEFT,
            top=RECTANGLE__TOP,
            right=RECTANGLE_RIGHT,
            bottom=RECTANGLE_BOTTOM
        )

    def tearDown(self):
        super().tearDown()

    def testConvertToRelativeCoordinateInside(self):

        x: int = 600
        y: int = 950
        #
        # This will return us an absolute position on the shape/rectangle
        absolutePosition: UmlPosition = UmlUtils.getNearestPointOnRectangle(x=x, y=y, rectangle=self._rectangle)

        expectedRelativePosition: UmlPosition = UmlPosition(x=100, y=0)
        relativePosition:         UmlPosition = UmlUtils.convertToRelativeCoordinates(absolutePosition=absolutePosition, rectangle=self._rectangle)

        self.assertEqual(expectedRelativePosition, relativePosition, 'Incorrect relative position')

    def testConvertToRelativeCoordinateOutside(self):
        x: int = 800
        y: int = 1300

        absolutePosition:         UmlPosition = UmlUtils.getNearestPointOnRectangle(x=x, y=y, rectangle=self._rectangle)
        expectedRelativePosition: UmlPosition = UmlPosition(x=200, y=200)
        relativePosition:         UmlPosition = UmlUtils.convertToRelativeCoordinates(absolutePosition=absolutePosition, rectangle=self._rectangle)

        self.assertEqual(expectedRelativePosition, relativePosition, 'Incorrect relative position')

    def testGetNearestPointOnRectangleTopOutside(self):
        x: int = 600
        y: int = 950

        expectedPoint: UmlPosition = UmlPosition(600, 1000)
        actualPoint:   UmlPosition = UmlUtils.getNearestPointOnRectangle(x=x, y=y, rectangle=self._rectangle)

        self.logger.info(f'{actualPoint=}')

        self.assertEqual(expectedPoint, actualPoint, 'Calculation for top outside is wrong')

    def testGetNearestPointOnRectangleLeftOutSide(self):

        x: int = 450
        y: int = 1100

        expectedPoint: UmlPosition = UmlPosition(500, 1100)
        actualPoint:   UmlPosition = UmlUtils.getNearestPointOnRectangle(x=x, y=y, rectangle=self._rectangle)

        self.assertEqual(expectedPoint, actualPoint, 'Calculation for left outside is wrong')

    def testGetNearestPointOnRectangleRightInSide(self):

        x: int = 650
        y: int = 1100

        expectedPoint: UmlPosition = UmlPosition(700, 1100)
        actualPoint:   UmlPosition = UmlUtils.getNearestPointOnRectangle(x=x, y=y, rectangle=self._rectangle)

        self.assertEqual(expectedPoint, actualPoint, 'Calculation for left outside is wrong')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestUmlUtils))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
