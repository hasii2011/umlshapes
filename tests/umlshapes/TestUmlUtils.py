
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase
from wx import Point

from umlshapes.UmlUtils import UmlUtils
from umlshapes.shapes.TopLeftMixin import Rectangle


class TestUmlUtils(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 01 June 2025
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()
        self._rectangle: Rectangle = Rectangle(left=500, top=1000, right=700, bottom=1200)

    def tearDown(self):
        super().tearDown()

    def testGetNearestPointOnRectangleTopOutside(self):
        x: int = 600
        y: int = 950

        expectedPoint: Point = Point(600, 1000)
        actualPoint:   Point = UmlUtils.getNearestPointOnRectangle(x=x, y=y, rectangle=self._rectangle)

        self.logger.info(f'{actualPoint=}')

        self.assertEqual(expectedPoint, actualPoint, 'Calculation for top outside is wrong')

    def testGetNearestPointOnRectangleLeftOutSide(self):

        x: int = 450
        y: int = 1100

        expectedPoint: Point = Point(500, 1100)
        actualPoint:   Point = UmlUtils.getNearestPointOnRectangle(x=x, y=y, rectangle=self._rectangle)

        self.assertEqual(expectedPoint, actualPoint, 'Calculation for left outside is wrong')

    def testGetNearestPointOnRectangleRightInSide(self):

        x: int = 650
        y: int = 1100

        expectedPoint: Point = Point(700, 1100)
        actualPoint:   Point = UmlUtils.getNearestPointOnRectangle(x=x, y=y, rectangle=self._rectangle)

        self.assertEqual(expectedPoint, actualPoint, 'Calculation for left outside is wrong')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestUmlUtils))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
